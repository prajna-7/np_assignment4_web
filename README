
# Forked vs Threaded Web Server - Performance Analysis

## Project Overview
This project compares the performance of two types of server architectures—**forked** and **threaded**—in handling concurrent client requests. The aim is to determine the optimal server type for various levels of concurrency, focusing on throughput (requests per second) and stability.

The project includes:
- A **forked server** implementation (`serverfork.cpp`).
- A **threaded server** implementation (`serverthread.cpp`).
- A **data collection** script (`dcollect.sh`) to perform load testing.
- Performance analysis using **linear regression** and **Support Vector Regression (SVR)** for predictive modeling (`regression_analysis.py`).

## Directory Structure
```
.
├── serverfork.cpp          # Forked server implementation
├── serverthread.cpp        # Threaded server implementation
├── dcollect.sh             # Script for data collection
├── regression_analysis.py  # Python script for performance prediction
├── Makefile                # For compiling the project
├── .gitignore              # Ignored files
├── small                   # Test file used for server load testing
├── big                     # Larger test file used for load testing
├── README.md               # Project documentation
└── statistics.png          # Performance comparison plot
```

## Features
- **Forked Server (`serverfork.cpp`)**: Uses a separate process to handle each client request.
- **Threaded Server (`serverthread.cpp`)**: Uses threads to handle multiple client requests concurrently.
- **Data Collection (`dcollect.sh`)**: Automates testing of both server types and logs performance metrics.
- **Performance Analysis (`regression_analysis.py`)**: Performs predictive analysis using linear regression on collected data to model server performance at higher concurrency levels.

## Getting Started

### Prerequisites
- C++ compiler (e.g., `g++`)
- Python 3.x with `matplotlib` and `scikit-learn`
- ApacheBench (`ab`) for load testing

### Installation
1. Clone the repository:
   ```bash
   git clone git@github.com:prajna-7/np_assignment4_web.git
   cd np_assignment4_web
   ```

2. Compile the servers using the `Makefile`:
   ```bash
   make
   ```

### Running the Servers
- **Forked server**:
   ```bash
   ./serverfork <ip>:<port>
   ```

- **Threaded server**:
   ```bash
   ./serverthread <ip>:<port>
   ```

### Data Collection and Testing
To collect performance data, run the `dcollect.sh` script:
```bash
./dcollect.sh
```
This script performs basic server testing and measures performance using different concurrency levels.

### Performance Prediction
To generate performance predictions and analysis, run the Python script:
```bash
python3 regression_analysis.py
```
This will generate a plot comparing the actual and predicted performance of both server types and save it as `Linear_Regression_analysis.png`.

## Performance Analysis
The project analyzes the performance of both server types at varying levels of concurrency. The threaded server outperforms the forked server at higher concurrency, but exhibits variability as concurrency increases. The linear regression analysis provides a general prediction of server behavior up to a concurrency level of 60.

## Future Improvements
- Implement additional predictive models like polynomial regression or neural networks for more accurate predictions.
- Further optimization of the threaded server to reduce performance variability at high concurrency.


